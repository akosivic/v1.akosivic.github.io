{"version":3,"sources":["Components/WelcomePage/img_avatar.jpg","Components/WelcomePage/index.js","Components/ModeChanger/index.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WelcomePage","twitter","linkedin","github","name","description","parentMode","location","parentSetMode","className","src","logo","alt","mode","href","rel","target","ModeChanger","children","useState","setMode","id","onClick","config","App","selectedMode","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,wC,4NC0D5BC,EAtDK,SAAC,GASd,IARLC,EAQI,EARJA,QACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,OACAC,EAKI,EALJA,KACAC,EAII,EAJJA,YAEAC,GAEI,EAHJC,SAGI,EAFJD,YAEI,EADJE,cAEA,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,SAASC,IAAKC,IAAMC,IAAI,WACvC,yBAAKH,UAAU,SACb,yBAAKA,UAAU,QACb,qCACA,yBAAKA,UAAU,kBAAkBI,KAAMP,KAGzC,uBAAGG,UAAU,oBAAb,OAAqCL,GACrC,uBAAGK,UAAU,oBAAoBJ,GACjC,uBAAGI,UAAU,gBACVR,GACC,uBACEa,KAAI,8BAAyBb,GAC7Bc,IAAI,sBACJC,OAAO,UAEP,uBAAGP,UAAU,oBAGhBN,GACC,uBACEW,KAAI,6BAAwBX,GAC5BY,IAAI,sBACJC,OAAO,UAEP,uBAAGP,UAAU,mBAGhBP,GACC,uBACEY,KAAI,kCAA6BZ,GACjCa,IAAI,sBACJC,OAAO,UAEP,uBAAGP,UAAU,yBC1BZQ,G,MApBK,SAAC,GAA6C,IAA3CX,EAA0C,EAA1CA,WAAYE,EAA8B,EAA9BA,cAAeU,EAAe,EAAfA,SAAe,EACzCC,mBAAS,QADgC,mBAC1DN,EAD0D,KACpDO,EADoD,KAM/D,OAJId,GAAcE,IAChBK,EAAOP,EACPc,EAAUZ,GAGV,yBAAKa,GAAG,eAAeR,KAAMA,GAC3B,yBAAKQ,GAAG,mBAAmBR,KAAMA,IACjC,yBAAKQ,GAAG,WACN,uBACEZ,UAAoB,SAATI,EAAkB,aAAe,cAC5CS,QAAS,kBAAMF,EAAiB,SAATP,EAAkB,QAAU,SACnDA,KAAMA,KAGV,6BAAMK,MCbGK,G,MAPA,CACXnB,KAAK,SACLC,YAAa,gDAEbF,OAAO,WACPF,QAAS,aCkBEuB,MAjBf,WAAgB,IAAD,EACWL,mBAAS,QADpB,mBACNN,EADM,KACAO,EADA,KAEPK,EAAe,CACnBnB,WAAYO,EACZL,cAAeY,GAIjB,OAFAG,EAAOjB,WAAaO,EACpBU,EAAOf,cAAgBY,EAErB,yBAAKX,UAAU,OACb,kBAAC,EAAgBgB,EACf,kBAAC,EAAgBF,MCLLG,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8980fa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_avatar.a256f869.jpg\";","import React from \"react\";\r\nimport \"./WelcomePage.css\";\r\nimport logo from \"./img_avatar.jpg\";\r\n\r\nconst WelcomePage = ({\r\n  twitter,\r\n  linkedin,\r\n  github,\r\n  name,\r\n  description,\r\n  location,\r\n  parentMode,\r\n  parentSetMode,\r\n}) => {\r\n  return (\r\n    <div className=\"WelcomePage\">\r\n      <img className=\"avatar\" src={logo} alt=\"Avatar\" />\r\n      <div className=\"right\">\r\n        <div className=\"left\">\r\n          <h1>hello</h1>\r\n          <div className=\"square bounce-7\" mode={parentMode}/>\r\n        </div>\r\n\r\n        <p className=\"description left\">I'm {name}</p>\r\n        <p className=\"description left\">{description}</p>\r\n        <p className=\"Social-Media\">\r\n          {twitter && (\r\n            <a\r\n              href={`https://twitter.com/${twitter}`}\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_BLANK\"\r\n            >\r\n              <i className=\"fab fa-twitter\" />\r\n            </a>\r\n          )}\r\n          {github && (\r\n            <a\r\n              href={`https://github.com/${github}`}\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_BLANK\"\r\n            >\r\n              <i className=\"fab fa-github\" />\r\n            </a>\r\n          )}\r\n          {linkedin && (\r\n            <a\r\n              href={`https://linkedin.com/in/${linkedin}`}\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_BLANK\"\r\n            >\r\n              <i className=\"fab fa-linkedin\" />\r\n            </a>\r\n          )}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default WelcomePage;\r\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./ModeChanger.css\";\r\n\r\nconst ModeChanger = ({ parentMode, parentSetMode, children }) => {\r\n  let [mode, setMode] = useState(\"dark\");\r\n  if (parentMode && parentSetMode) {\r\n    mode = parentMode;\r\n    setMode = parentSetMode;\r\n  }\r\n  return (\r\n    <div id=\"mode-changer\" mode={mode}>\r\n      <div id=\"triangle-topleft\" mode={mode} />\r\n      <div id=\"overlay\">\r\n        <i\r\n          className={mode === \"dark\" ? \"fas fa-sun\" : \"fas fa-moon\"}\r\n          onClick={() => setMode(mode === \"dark\" ? \"light\" : \"dark\")}\r\n          mode={mode}\r\n        />\r\n      </div>\r\n      <div>{children}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default ModeChanger;\r\n","const config = {\r\n    name:'Vic A.',\r\n    description: 'Software Engineer | .net | Javascript | Ninja',\r\n    //social media\r\n    github:'akosivic',\r\n    twitter: 'akosivic',\r\n};\r\nexport default config;\r\n","import React, { useState } from \"react\";\nimport WelcomePage from \"./Components/WelcomePage\";\nimport ModeChanger from \"./Components/ModeChanger\";\nimport \"./App.css\";\nimport config from \"./config\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"dark\");\n  const selectedMode = {\n    parentMode: mode,\n    parentSetMode: setMode\n  };\n  config.parentMode = mode;\n  config.parentSetMode = setMode;\n  return (\n    <div className=\"App\">\n      <ModeChanger {...selectedMode}>\n        <WelcomePage {...config} />\n      </ModeChanger>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}